                                                //   java pipeline


pipeline {
    agent any
    tools {
        maven 'maven'
        jdk 'jdk'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage("clean workspace") {
            steps {
                cleanWs()
            }
        }
        stage('poll scm') {
            steps {
                git branch: 'main', url: 'https://github.com/santoshpalla27/java-cicd.git'
            }
        }
        stage('test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('trivy fs scan') {
            steps {
                sh 'trivy fs --format table -o fs.html .'
            }
        }
        stage('sonar scan') {
            steps {
                withSonarQubeEnv('sonar-server') { 
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=santosh-java \
                        -Dsonar.projectKey=santosh-java \
                        -Dsonar.sources=. '''   
                }
            }
        }
        stage('sonar quality gate') {
            steps {
                script {
                    def qualityGate = waitForQualityGate()  
                    if (qualityGate.status != 'OK') {  
                        error "Quality Gate failed: ${qualityGate.status}"
                    }
                    else{
                        echo "Quality Gate passed"
                    }
                }
            }
        }
        stage('build') {
            steps {
                sh 'mvn clean install '
            }
        }
        stage('nexus upload') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-setting', jdk: 'jdk', maven: 'maven', mavenSettingsConfig: '', traceability: true) {
                    sh 'mvn deploy'
                }
            }
        }
        stage('owasp dependency check') {
            steps {
                withCredentials([string(credentialsId: 'owasp', variable: 'NVD_API_KEY')]) {
                    dependencyCheck additionalArguments: "--scan target/ --nvdApiKey ${NVD_API_KEY}", odcInstallation: 'owasp'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        stage('remove previous images'){
            steps {
                script {
                    // Get all Docker image IDs
                    def images = sh(script: "docker images -q", returnStdout: true).trim()

                    // Remove all images if any are found
                    if (images) {
                        sh "echo '${images}' | tr '\\n' ' ' | xargs -r docker rmi -f"
                    } else {
                        echo "No Docker images to remove."
                    }
                }
            }
        }
        stage('docker build') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker build -t santoshpalla27/java-cicd:${BUILD_NUMBER} .'
                    }
                }
            }
        }
        stage('trivy image scan') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'trivy image --format table -o image.html santoshpalla27/java-cicd:${BUILD_NUMBER}'
                    }
                }
            }
        }
        stage('docker push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker push santoshpalla27/java-cicd:${BUILD_NUMBER} '                    }
                }
            }
        }
        stage('edit kubernetes manifests'){
            steps{
                script{
                    withCredentials([string(credentialsId: 'github_token', variable: 'github_token')]) {
                        sh '''
                            git config user.email "santoshpalla2002@gmail.com"
                            git config user.name "santoshpalla27"
                            sed -i "s#santoshpalla27/*.*#santoshpalla27/java-cicd:${BUILD_NUMBER}#" deployment/tomcat-deployment.yaml
                            git add .
                            git commit -m "Updated Docker images to version ${BUILD_NUMBER}"
                            git push https://${github_token}@github.com/santoshpalla27/java-cicd.git HEAD:main

                        '''
                    }
                }
            }
        }
        stage('k8s deploy') {
            steps {    
                script {
                    withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'santosh', contextName: '', credentialsId: 'k8s-token', namespace: 'jenkins', serverUrl: 'https://5EFFC5127857BA1BA505B4BEED3EC976.gr7.us-east-1.eks.amazonaws.com']]) {
                        sh 'kubectl apply -f deployment/tomcat-deployment.yaml'
                    }
                }
            }
        }
        stage('k8s verify deployment') {
            steps {    
                script {
                    withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'santosh', contextName: '', credentialsId: 'k8s-token', namespace: 'jenkins', serverUrl: 'https://5EFFC5127857BA1BA505B4BEED3EC976.gr7.us-east-1.eks.amazonaws.com']]) {
                        sh '''
                            kubectl get svc -n jenkins
                            kubectl get pods -n jenkins
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

                def body = """
                <html>
                <body>
                <div style="border: 4px solid ${bannerColor}; padding: 10px">
                    <h2>${jobName} - Build ${buildNumber}</h2>
                    <div style="background-color: ${bannerColor}; padding: 10px;">
                        <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                    </div>
                    <p>Check the <a href="${env.BUILD_URL}">console output</a>.</p>
                </div>
                </body>
                </html>
                """

                emailext (
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'santoshpalla27@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'santoshpalla27@example.com',
                    mimeType: 'text/html',
                )
            }
        }
   }
}





                         terraform pipeline with parameters and aws credentials


pipeline {
    agent any
    
    parameters {
        choice(name: 'ACTION', choices: ['plan', 'apply', 'destroy'], description: 'Choose Terraform action')
    }
    
    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        TF_WORKING_DIR = 'terraform'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/santoshpalla27/4-tier-project.git'
            }
        }

        stage('Setup AWS Credentials') {
            steps{
                sh '''
                aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                aws configure set region $AWS_REGION
                
                # Verify configuration
                aws sts get-caller-identity
                '''
            }
        }

        stage('Setup Terraform') {
            steps {
                dir(env.TF_WORKING_DIR) {
                    sh 'terraform init'
                }
            }
        }

        stage('Plan Terraform') {
            steps {
                dir(env.TF_WORKING_DIR) {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Apply or Destroy Terraform') {
            when {
                expression { params.ACTION == 'apply' || params.ACTION == 'destroy' }
            }
            steps {
                dir(env.TF_WORKING_DIR) {
                    script {
                        if (params.ACTION == 'apply') {
                            sh 'terraform apply -auto-approve tfplan'
                        } else if (params.ACTION == 'destroy') {
                            sh 'terraform destroy -auto-approve'
                        }
                    }
                }
            }
        }
    }
}






============================================================================================================


pipeline {
    agent any
    tools {
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'  
        FRONTEND_IMAGE = "santoshpalla27/sample:frontend-${BUILD_NUMBER}"  
    }
    stages {
        stage('git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/santoshpalla27/mern-employee-docker-compose.git'
            }
        }
        stage('Build') {
            steps {
                dir('mern/frontend') {
                    sh 'npm install'
                    // sh 'npm run build'
                }
            }
        }
        stage('sonar scan') {
            steps {
                dir('mern/frontend') {
                    withSonarQubeEnv('sonar-server') {   
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=sample-frontend \
                        -Dsonar.projectKey=sample-frontend \
                        -Dsonar.sources=. '''   
                    }
                }
            }
        }
        stage('Quality Gate frontned') {
            steps {
                script {
                    timeout(time: 1, unit: 'MINUTES') {  
                        def qualityGate = waitForQualityGate()  
                        if (qualityGate.status != 'OK') {  
                            error "Quality Gate failed: ${qualityGate.status}"
                        } else {
                            echo "Quality Gate passed"
                        }
                    }
                }
            }
        }
        stage('building frontend image') {
            steps {
                dir('mern/frontend'){
                    script {
                        sh "docker build -t ${FRONTEND_IMAGE} -f Dockerfile ."
                    }
                }
            }
        }
        stage('trivy scan frontend-image'){
            steps {
                script {
                    sh "trivy image ${FRONTEND_IMAGE} > trivy-report.txt"
                }
            }
        }
        stage('image push to docker hub') {
            steps {
                dir('mern/frontend'){
                    script {
                        withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                            sh "docker push ${FRONTEND_IMAGE}"
                        }  
                    }
                }
            }
        }
        stage('deploy to single instance'){
            steps{
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ssh-token', keyFileVariable: 'SSH_KEY')]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ec2-user@34.226.140.215 '
                                docker pull ${FRONTEND_IMAGE} || true
                                docker stop frontend-image || true
                                docker rm frontend-image || true
                                docker run -d --name frontend-image -p 80:80 ${FRONTEND_IMAGE}
                            '
                        """
                    }
                }
           }
        }
        stage('deploy to asg instances') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(credentialsId: 'ssh-token', keyFileVariable: 'SSH_KEY'),
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'aws-region', variable: 'AWS_REGION')
                    ]) {
                        def instanceIps = sh(script: '''
                            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                            export AWS_REGION=${AWS_REGION}

                            aws ec2 describe-instances \
                            --filters "Name=tag:Name,Values=web-server" "Name=instance-state-name,Values=running" \
                            --query "Reservations[*].Instances[*].PublicIpAddress" \
                            --output text
                        ''', returnStdout: true).trim().split()

                        if (instanceIps.size() == 0) {
                            error "No EC2 instances found with the tag Name=web-server"
                        }

                        for (ip in instanceIps) {
                            echo "Deploying to ${ip}"
                            sh """
                                ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ec2-user@${ip} '
                                    docker pull ${FRONTEND_IMAGE} || true
                                    docker stop frontend-image || true
                                    docker rm frontend-image || true
                                    docker run -d --name frontend-image -p 80:80 ${FRONTEND_IMAGE}
                                '
                            """
                        }
                    }
                }
            }
        }

    }
    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

                def body = """
                <html>
                <body>
                <div style="border: 4px solid ${bannerColor}; padding: 10px">
                    <h2>${jobName} - Build ${buildNumber}</h2>
                    <div style="background-color: ${bannerColor}; padding: 10px;">
                        <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                    </div>
                    <p>Check the <a href="${env.BUILD_URL}">console output</a>.</p>
                </div>
                </body>
                </html>
                """

                emailext (
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'santoshpalla27@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'santoshpalla27@example.com',
                    mimeType: 'text/html',
                )
            }           
            sh 'docker system prune -f || true'
        }
   }    
}
